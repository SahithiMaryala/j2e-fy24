
1.class Stack1{
    public static Queue<Integer> q1=new LinkedList<>();
    public static Queue<Integer> q2=new LinkedList<>();

    public void push(int n){
        q2.add(n);
        while(!q1.isEmpty()){
            q2.add(q1.peek());
            q1.poll();
        }
        Queue<Integer> q=q1;
        q1=q2;
        q2=q;
    }
    public int pop(){
        if(!q1.isEmpty()){
            return q1.poll();
        }
        return 0;
    }
    public boolean isEmpty(){
        return q1.isEmpty();
    }
    public int size(){
        return q1.size();
    }

}
public class StackUsing2Queue {
    public static void main(String[] args) {
        Stack1 st=new Stack1();
        st.push(2);
        st.push(3);
        System.out.println(st.pop());
        st.push(4);
        System.out.println(st.pop());



    }
}

2.
import java.util.*;

class QueueUsing2Stack
{
static class Queue
{
	static Stack<Integer> s1 = new Stack<Integer>();
	static Stack<Integer> s2 = new Stack<Integer>();

	static void enQueue(int x)
	{
		
		while (!s1.isEmpty())
		{
			s2.push(s1.pop());
			
		}

		
		s1.push(x);

		
		while (!s2.isEmpty())
		{
			s1.push(s2.pop());
			
		}
	}

	
	static int deQueue()
	{
		
		if (s1.isEmpty())
		{
			System.out.println("Q is Empty");
			System.exit(0);
		}

		
		int x = s1.peek();
		s1.pop();
		return x;
	}
};


public static void main(String[] args)
{
	Queue q = new Queue();
	q.enQueue(1);
	q.enQueue(2);
	q.enQueue(3);

	System.out.println(q.deQueue());
	System.out.println(q.deQueue());
	System.out.println(q.deQueue());
}
}



3.
