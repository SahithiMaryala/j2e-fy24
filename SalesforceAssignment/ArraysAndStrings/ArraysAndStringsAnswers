1.class Solution {
     public List<Boolean> kidsWithCandies(int[] candies, int ecandies) {
        int max = 0;
        int n = candies.length;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, candies[i]);
        }
        
        List<Boolean> resultList = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            resultList.add(ecandies + candies[i] >= max);
        }
        
        return resultList;
    }
}
2.class Solution {
    public int maxArea(int[] h) {
        int ans=0;
        int i=0;
        int j=h.length-1;
        while(i<j){
            if(h[i]>h[j]){
                ans=Math.max(h[j]*(j-i),ans);
                j--;
            }
            else if(h[i]<=h[j]){
                ans=Math.max(h[i]*(j-i),ans);
                i++;
            }
        }
        return ans;
    }
}

3.
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int i=0;
        int j;
        int k;
        int ans=nums[0]+nums[1]+nums[2];
        int diff=Math.abs(target-ans);
        while(i<nums.length-2){
            j=i+1;
            k=nums.length-1;
            while(j<k){
                int sum=nums[i]+nums[j]+nums[k];
                int currdiff=Math.abs(target-sum);
                if(currdiff<diff){
                    diff=currdiff;
                    ans=sum;
                }
                if(target<sum){
                    k--;
                }
                else if(target>sum){
                    j++;
                }
                else if(target==sum){
                    return sum;
                }
            }
            i++;
        }
        return ans;
    }
}
4.class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length==0 || nums.length==1){
            return;
        }
        int i=nums.length-2;
        while(i>=0){
            if(nums[i]>=nums[i+1]){
                i--;
            }
            else 
                break;
        }
        System.out.println("i "+i);
        int j=nums.length-1;
        
        if(i>=0){
            while(j>=i){
                if(nums[j]<=nums[i]){
                    j--;
                }
                else{
                    break;
                }
            }
            swap(nums,i,j);
        }
        System.out.println("j "+j);
        
        
        
            reverse(nums,i+1,nums.length-1);
        
        
    }
    public void swap(int nums[],int i,int j){
        
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    public void reverse(int[]nums,int i,int j){
        while(i<=j){
            swap(nums,i++,j--);
        }
    }
}
5.class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        int mid;
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[low]<=nums[mid]){
                if(nums[low]<=target && target<=nums[mid]){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else if(nums[mid]<=nums[high]){
                if(nums[mid]<=target && target<=nums[high]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
            
        }
        return -1;
    }
}
6.class Solution {
   
    Set<List<Integer>> set = new HashSet<>();
    int vis[] = null;
    
    public List<List<Integer>> permuteUnique(int[] nums) {
       
        vis = new int[nums.length];
        helper(nums, new ArrayList<Integer>());
       
        return new ArrayList<>(set);
        
    }
    
    private void helper(int[] nums, List<Integer> list){
         if(list.size()==nums.length){
           set.add(new ArrayList<>(list)); 
             return;
         }
      
        for(int i=0; i<nums.length; i++){    

            if(vis[i] == 0){
                list.add(nums[i]);
                vis[i] = 1;
                helper(nums, list);
                list.remove(list.size()-1);
                vis[i] = 0;
            }

             
        }
        
        
    }
    
}
7.class Solution {
    public int maxSubArray(int[] arr) {
        int n=arr.length;
        int sum=0;
        int ans=arr[0];
        int j=0;
        int k=0;
        int count=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];

            if(sum>ans){
                count=Math.max(count,Math.abs(i-j+1));

                ans=sum;
            }
            if(sum<0){
                sum=0;
                j=i+1;
            }
        }
        System.out.println("count is "+count);
        return ans;
    }
}
8.class Solution {
	public int[][] merge(int[][] intervals) {
		if (intervals.length <= 1)
			return intervals;

		// Sort by ascending starting point
		Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));

		List<int[]> result = new ArrayList<>();
		int[] newInterval = intervals[0];
		result.add(newInterval);
		for (int[] interval : intervals) {
			if (interval[0] <= newInterval[1]) 
				newInterval[1] = Math.max(newInterval[1], interval[1]);
			else {                             
				newInterval = interval;
				result.add(newInterval);
			}
		}

		return result.toArray(new int[result.size()][]);
	}
}
9.class Solution {
    public void sortColors(int[] a) {
        int i=0;
        int low=0;
        int high=a.length-1;
        while(i<=high){
            if(a[i]==0){
                swap(a,i,low);
                low=low+1;
                i=i+1;
            }
            else if(a[i]==2){
                swap(a,i,high);
                high=high-1;
            }
            else{
                i=i+1;
            }
        }
        
    }
    public void swap(int[] a,int i,int j){
        int temp=a[i];
        a[i]=a[j];
        a[j]=temp;
    }
}
10.public int maxProfit(int[] A) {                        
        int n = A.length, lastBuy = -A[0], lastSold = 0;
        if (n == 0) return 0;
                                
        for (int i = 1; i < n; i++) {
            int curBuy = Math.max(lastBuy, lastSold - A[i]);
            int curSold = Math.max(lastSold, lastBuy + A[i]);
            lastBuy = curBuy;
            lastSold = curSold;
        }
        
        return lastSold;
    }
11.class Solution {
    public int findPeakElement(int[] arr) {
         int start = 0;
        int end = arr.length - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] > arr[mid + 1]) {
                end = mid;
            } else if (arr[mid] < arr[mid + 1]) {
                start = mid + 1;
            }
        }
        return start;
    }

}
12.
13.class Solution {
    public int maxArea(int[] h) {
        int ans=0;
        int i=0;
        int j=h.length-1;
        while(i<j){
            if(h[i]>h[j]){
                ans=Math.max(h[j]*(j-i),ans);
                j--;
            }
            else if(h[i]<=h[j]){
                ans=Math.max(h[i]*(j-i),ans);
                i++;
            }
        }
        return ans;
    }
}
14.class Solution {
    public int findMaxConsecutiveOnes(int[] arr) {
        
        int cnt=0;
        int ans=0;
        int i=0;
        int j=0;
        int sum=0;
        for(i=0;i<arr.length;i++){
            if(arr[i]==1){
                cnt++;
                ans=Math.max(cnt,ans);
            }
            else{
                cnt=0;
            }
        }
        return ans;
    }
}
15.public class Solution {
    public int findKthLargest(int[] nums, int k) {
        int start = 0, end = nums.length - 1, index = nums.length - k;
        while (start < end) {
            int pivot = partion1(nums, start, end);
            if (pivot < index) start = pivot + 1; 
            else if (pivot > index) end = pivot - 1;
            else return nums[pivot];
        }
        return nums[start];
    }
    
    public int partion1(int[] nums, int start, int end) {
        int pivot = start, temp;
        while (start <= end) {
            while (start <= end && nums[start] <= nums[pivot]) start++;
            while (start <= end && nums[end] > nums[pivot]) end--;
            if (start > end) break;
            temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
        }
        temp = nums[end];
        nums[end] = nums[pivot];
        nums[pivot] = temp;
        return end;
    }
}
