1.

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {

        Stack<TreeNode> stackP = new Stack<>();
        Stack<TreeNode> stackQ = new Stack<>();

        TreeNode muqP, muqQ;

        stackP.add(p);
        stackQ.add(q);

        while (!(stackP.isEmpty()) && !(stackQ.isEmpty())){

            muqP = stackP.pop();
            muqQ = stackQ.pop();

            if ((muqP!=null && muqQ==null) || (muqP==null && muqQ!=null) ) return false;
            if ((muqP != null && muqQ != null) && (muqP.val != muqQ.val)) return false;

            if (muqP!=null){
                stackP.add(muqP.right);
                stackP.add(muqP.left);
            }

            if (muqQ!=null){
                stackQ.add(muqQ.right);
                stackQ.add(muqQ.left);
            }


        }


        return true;

    }
}


2.

class Solution {


    public boolean isSymmetric(TreeNode root) {

        return root == null || isSymmetricHelp(root.left, root.right);
    }


    private boolean isSymmetricHelp(TreeNode left, TreeNode right){

        if(left == null || right == null)
            return left == right;


        if(left.val != right.val)
            return false;


        return isSymmetricHelp(left.left, right.right) && isSymmetricHelp(left.right, right.left);
    }
}


3.


class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root==null)
            return root;
        invertTree(root.left);
        invertTree(root.right);

        TreeNode temp=root.left;
        root.left=root.right;
        root.right=temp;
        return root;
    }
}



4.


class Solution {
    public boolean isBalanced(TreeNode root) {

        return height(root)!=-1;

    }
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }

        int lh=height(root.left);
        if(lh==-1) return -1;
        int rh=height(root.right);
        if(rh==-1) return -1;

        if(Math.abs(lh-rh)>1){
            return -1;
        }
        return 1+Math.max(lh,rh);
    } 
}


5.


class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if (root1 == null && root2 == null) return null;
        TreeNode node = new TreeNode();
        if (root1 != null) node.val += root1.val;
        if (root2 != null) node.val += root2.val;
        node.left = mergeTrees(root1 != null ? root1.left : null, root2 != null ? root2.left : null);
        node.right = mergeTrees(root1 != null ? root1.right : null,root2 != null ? root2.right : null);
        return node;
    }
}



6.

class Solution {
    public boolean fullArr(ArrayList<Integer> arr, int val)
    {
        if (arr.size() > 0)
        {
            if (arr.get(arr.size() - 1) < val)
                arr.add(val);
            else
                return  false;
        }
        else
            arr.add(val);
        return true;
    }

    public boolean checkArr(TreeNode root, ArrayList<Integer> arr) {
        boolean ok = true;

        if (ok && root.left != null)
        {
            if ((root.left.val < root.val))
                ok = checkArr(root.left, arr);
            else
                ok = false;
        }
        if (ok) ok = fullArr(arr, root.val);
        if (ok && root.right != null) {
            if (root.right.val > root.val)
                ok = checkArr(root.right, arr);
            else
                ok = false;
        }
        return ok;
    }

    public boolean isValidBST(TreeNode root) {
        return checkArr(root, new ArrayList<Integer>());
    }
}


7.



class Solution {
    public int kthSmallest(TreeNode root, int k) {
        ArrayList<Integer> list = new ArrayList<>();
        inorder(root,list);

        if(k>list.size())
        return -1;

        return list.get(k-1);

    }
    public void inorder(TreeNode root, ArrayList<Integer> list)
    {

        if(root!=null)
        {
            inorder(root.left,list);
            list.add(root.val);
            inorder(root.right,list);
        }
    }
}



8.



class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return CreateBST(nums, 0, nums.length - 1);
    }

    private TreeNode CreateBST(int nums[], int l, int r) {
        if (l > r) { 
            return null;
        }

        int mid = (l + r) / 2;
        TreeNode root = new TreeNode(nums[mid]); 
        root.left = CreateBST(nums, l, mid - 1); 
        root.right = CreateBST(nums, mid + 1, r); 
        return root;
    }
}



8.



class Solution {

    private int sum = 0;

    public int rangeSumBST(TreeNode root, int low, int high) {
        if(root == null) {
            return 0;
        }
        if(low <= root.val && root.val <= high) {
            sum += root.val;
        }
        if(root.val > low) {
            rangeSumBST(root.left, low, high);
        }
        if(root.val < high) {
            rangeSumBST(root.right, low, high);
        }
        return sum;
    }
}



9.

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {


        if(root == null || root.val == val) {
            
            return root;
        }


        if(val < root.val) {
            return searchBST(root.left, val);
        }

        else {
            return searchBST(root.right, val);
        }
    }
}


